@page "/Register"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject SeamlessEscapesBlazor.Services.UserService UserService
@using SeamlessEscapesBlazor.Models

<div class="register-page container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h3>Register</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration" FormName="registrationForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="form-group mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="registrationModel.Email" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <a href="/login">Already have an account? Login</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private string errorMessage;

    private async Task HandleRegistration()
    {
        try
        {
            if (registrationModel.Password != registrationModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            // Check if username or email is already taken
            if (await UserService.IsUsernameTaken(registrationModel.Username))
            {
                errorMessage = "Username is already taken.";
                return;
            }

            if (await UserService.IsEmailTaken(registrationModel.Email))
            {
                errorMessage = "Email is already taken.";
                return;
            }

            var newUser = new User
            {
                Username = registrationModel.Username,
                Email = registrationModel.Email,
                Password = registrationModel.Password // In a real app, make sure to hash the password
            };

            await UserService.RegisterUserAsync(newUser);

            // Navigate to the login page after successful registration
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            // Handle error
            errorMessage = $"Error registering user: {ex.Message}";
            Console.WriteLine($"Error registering user: {ex.Message}");
        }
    }

    private class RegistrationModel
    {
        public string Username { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
