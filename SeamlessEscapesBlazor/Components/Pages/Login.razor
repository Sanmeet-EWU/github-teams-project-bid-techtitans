@page "/Login"

@using SeamlessEscapesBlazor.Data
@using SeamlessEscapesBlazor.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext

<div class="login-page container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h3>Account Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="registerForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="form-group mb-3">
                            <label for="username" class="form-label">Email</label>
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Email" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <a href="/register">Don't have an account? Register</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    [Inject]
    private NavigationManager Navigation { get; set; }

    private async Task HandleLogin()
    {
        try
        {
            // Perform authentication logic here

            // If authentication fails, set an error message
            errorMessage = "Invalid email or password.";
        }
        catch (Exception ex)
        {
            // Handle other exceptions
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
