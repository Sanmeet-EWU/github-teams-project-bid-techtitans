@page "/"

@using SeamlessEscapesBlazor.Components.Data
@inject NavigationManager NavigationManager

<EditForm Model="@bookingRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="departure">Departure Date:</label>
        <div style="max-width: 300px;">
            <InputDate id="departure" @bind-Value="bookingRequest.DepartureDate" min="@today" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label for="arrival">Arrival Date:</label>
        <div style="max-width: 300px;">
            <InputDate id="arrival" @bind-Value="bookingRequest.ArrivalDate" min="@today" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label for="source">Source City:</label>
        <div style="max-width: 300px;">
            <InputSelect id="source" @bind-Value="bookingRequest.SourceCity" class="form-control">
                <option value="" selected disabled>Select Source City</option>
                @foreach (var airport in Airports)
                {
                    <option value="@airport.Code">@airport.Name (@airport.Code)</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="destination">Destination City:</label>
        <div style="max-width: 300px;">
            <InputSelect id="destination" @bind-Value="bookingRequest.DestinationCity" class="form-control">
                <option value="" selected disabled>Select Destination City</option>
                @foreach (var airport in Airports)
                {
                    <option value="@airport.Code">@airport.Name (@airport.Code)</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="people">Number of People:</label>
        <div style="max-width: 300px;">
            <InputNumber id="people" @bind-Value="bookingRequest.NumberOfPeople" min="1" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label for="transport">Mode of Transport:</label>
        <div style="max-width: 300px;">
            <InputSelect id="transport" @bind-Value="bookingRequest.TransportMode" class="form-control">
                <option value="" selected disabled>Select Mode of Transportation</option>
                <option value="Flight">Flight</option>
                <option value="Road">Road</option>
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="interests">Interests:</label>
        <div style="max-width: 300px;">
            <InputText id="interests" @bind-Value="bookingRequest.Interests" class="form-control" />
        </div>
    </div>

    <button type="button" class="btn btn-primary" href="/Flights">Submit and Go to Flights</button>
  
</EditForm>
 
@code {
    private BookingRequest bookingRequest = new BookingRequest();


       public class BookingRequest
    {
        public DateTime DepartureDate { get; set; } = DateTime.Now;
        public DateTime ArrivalDate { get; set; } = DateTime.Now.AddDays(1);
        public string SourceCity { get; set; }
        public string DestinationCity { get; set; }
        public int NumberOfPeople { get; set; } = 1;
        public string TransportMode { get; set; }
        public string Interests { get; set; }
    }

    private string today = DateTime.Now.ToString("yyyy-MM-dd");

    private List<AirportInfo> Airports { get; set; }


    protected override void OnInitialized()
    {
        Airports = AirportData.GetAirports();
    }

    private void HandleValidSubmit()
    {
        if (ValidateInputs())
        {
            string destinationUrl = "/Flights";
            NavigationManager.NavigateTo(destinationUrl);
        }
    }

    private bool ValidateInputs()
    {
        return (bookingRequest.ArrivalDate > bookingRequest.DepartureDate) &&
               (string.Equals(bookingRequest.TransportMode, "Flight", StringComparison.OrdinalIgnoreCase));
    }
}






 